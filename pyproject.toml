[tool.black]
line-length = 120

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
  "test_*.py",
]
# source = ["supertask"]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = ["supertask"]
exclude = [
]
check_untyped_defs = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
non_interactive = true

[tool.pytest.ini_options]
addopts = """
  -rfEXs -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
testpaths = [
  "test_*.py",
]
xfail_strict = true
markers = [
]

[tool.ruff]
line-length = 120

select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # pandas-vet
  "PD",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
  # Probable insecure usage of temporary file or directory
  "S108",
]

extend-exclude = [
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow use of `assert`, and `print`.
"test_*.py" = ["S101"]  # Allow use of `assert`, and `print`.
"examples/*" = ["T201"]  # Allow `print`



# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  # { cmd = "pyproject-fmt pyproject.toml" },
]

lint = [
  { cmd = "ruff ." },
  { cmd = "black --check ." },
  # { cmd = "validate-pyproject pyproject.toml" },
  # { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*" },
]

test = { cmd = "pytest" }
